<databaseChangeLog xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd">

    <changeSet id="v2-1" author="Aleksei Shendo">

        <insert
                schemaName="flashcards"
                tableName="answer">
            <column name="answer" value="1. Модульность; 2. Повторное использование кода; 3. Инкапсуляция; 4. Наследование; 5. Полиморфизм."/>
            <column name="question_id" valueNumeric="2"/>
            <column name="answer_order" valueNumeric="1"/>
        </insert>
        <insert
                schemaName="flashcards"
                tableName="answer">
            <column name="answer" value="ООП имеет несколько преимуществ, вот некоторые из них:

1. Модульность: ООП позволяет разбить программу на отдельные модули, называемые классами. Каждый класс может иметь свою собственную функциональность, что упрощает понимание и поддержку кода.

2. Повторное использование кода: ООП позволяет создавать классы и объекты, которые могут быть повторно использованы в разных частях программы. Это экономит время разработки и позволяет избежать дублирования кода.

3. Инкапсуляция: ООП позволяет скрыть внутренние детали реализации объектов от внешнего мира. Таким образом, объекты могут предоставлять только необходимый интерфейс для взаимодействия с другими объектами.

4. Наследование: ООП поддерживает концепцию наследования, позволяющую создавать новые классы на основе существующих. Это позволяет унаследованным классам наследовать свойства и методы родительского класса, что способствует повторному использованию кода и упрощает его расширение.

5. Полиморфизм: ООП позволяет использовать одинаковые методы или операции для разных типов данных. Это позволяет обрабатывать различные объекты с помощью единого интерфейса, что делает код более гибким и расширяемым.

В целом, ООП помогает создавать более структурированный, гибкий и легко поддерживаемый код."/>
            <column name="question_id" valueNumeric="2"/>
            <column name="answer_order" valueNumeric="2"/>
        </insert>

        <insert
                schemaName="flashcards"
                tableName="answer">
            <column name="answer" value="1. Сложность; 2. Избыточность; 3. Производительность; 4. Сложность отладки; 5. Зависимость от дизайна"/>
            <column name="question_id" valueNumeric="3"/>
            <column name="answer_order" valueNumeric="1"/>
        </insert>

        <insert
                schemaName="flashcards"
                tableName="answer">
            <column name="answer" value="У ООП также есть некоторые недостатки, вот некоторые из них:

1. Сложность: ООП может быть сложным для понимания и изучения, особенно для новичков. Концепции, такие как наследование и полиморфизм, могут быть запутанными и требуют времени для освоения.

2. Избыточность: В некоторых случаях ООП может привести к избыточности кода. Некоторые задачи могут быть реализованы более простыми и эффективными способами без использования объектно-ориентированного подхода.

3. Производительность: Использование ООП может привести к потере производительности из-за дополнительных накладных расходов на создание и управление объектами. В некоторых случаях, особенно при работе с большими объемами данных, процессорное время и память могут быть использованы менее эффективно.

4. Сложность отладки: При работе с ООП кодом может быть сложно определить, где именно возникает ошибка. Из-за сложных взаимодействий между объектами и классами, отладка может быть более трудоемкой.

5. Зависимость от дизайна: Если дизайн классов и их взаимодействие неправильно спроектированы, это может привести к проблемам в дальнейшей разработке и поддержке программы. Изменение одного класса может потребовать изменения во многих других классах, что может быть трудоемким и рискованным.

Важно отметить, что эти недостатки не делают ООП непрактичным или невыгодным. Они просто указывают на некоторые потенциальные проблемы, с которыми разработчики могут столкнуться при использовании этого подхода."/>
            <column name="question_id" valueNumeric="3"/>
            <column name="answer_order" valueNumeric="2"/>
        </insert>

    </changeSet>

</databaseChangeLog>